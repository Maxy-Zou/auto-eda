import base64
import io
from typing import Dict, List

import numpy as np
import pandas as pd
import plotly.express as px
from joblib import dump
import matplotlib.pyplot as plt
from sklearn.datasets import load_iris, fetch_california_housing

def load_sample_dataset(name: str) -> pd.DataFrame:
    if name == "Iris":
        iris = load_iris(as_frame=True)
        df = iris.frame
        df.rename(columns={"target": "species"}, inplace=True)
        return df
    if name == "California Housing":
        cal = fetch_california_housing(as_frame=True)
        df = cal.frame
        return df
    if name == "Titanic":
        # Small, tidy Titanic sample
        url = "https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv"
        return pd.read_csv(url)
    raise ValueError("Unknown sample name")

def safe_sample(df: pd.DataFrame, max_rows: int = 10_000) -> pd.DataFrame:
    if len(df) <= max_rows:
        return df
    return df.sample(n=max_rows, random_state=42)

def _is_mostly_datetime(series: pd.Series, threshold: float = 0.6) -> bool:
    if series.dtype.kind in ("M",):
        return True
    if series.dtype == object:
        non_null = series.dropna()
        if non_null.empty:
            return False
        parsed = pd.to_datetime(non_null, errors="coerce", utc=True)
        success_rate = parsed.notna().mean()
        return success_rate >= threshold
    return False

def infer_column_types(df: pd.DataFrame) -> Dict[str, List[str]]:
    numeric, categorical, datetime_cols, text = [], [], [], []
    n = len(df)

    for col in df.columns:
        s = df[col]
        if _is_mostly_datetime(s):
            datetime_cols.append(col)
            continue

        if pd.api.types.is_numeric_dtype(s):
            # Low-cardinality integer â†’ categorical
            if pd.api.types.is_integer_dtype(s) and s.nunique(dropna=True) <= max(10, int(0.05 * n)):
                categorical.append(col)
            else:
                numeric.append(col)
            continue

        # Non-numeric
        if pd.api.types.is_bool_dtype(s):
            categorical.append(col)
            continue

        # Heuristic: long text if avg length >= 30
        if s.dtype == object:
            non_null = s.dropna().astype(str)
            avg_len = non_null.str.len().mean() if not non_null.empty else 0
            if avg_len >= 30:
                text.append(col)
            else:
                categorical.append(col)
            continue

        # Fallback
        categorical.append(col)

    return {
        "numeric": numeric,
        "categorical": categorical,
        "datetime": datetime_cols,
        "text": text,
    }

def fig_to_png_base64(fig) -> str:
    """Return a base64 PNG data URI for a Matplotlib figure."""
    buf = io.BytesIO()
    fig.savefig(buf, format="png", bbox_inches="tight")
    buf.seek(0)
    b64 = base64.b64encode(buf.read()).decode("ascii")
    return f"data:image/png;base64,{b64}"

def bytes_from_model(model) -> bytes:
    """Serialize a model to bytes using joblib."""
    buf = io.BytesIO()
    dump(model, buf)
    buf.seek(0)
    return buf.read()

def build_report_html(
    dataset_summary: dict,
    eda_highlights: dict,
    best_model_name: str,
    metrics: dict,
    key_plots_base64: list,
) -> str:
    # Minimal inline CSS; keep simple for portability
    css = """
    body{font-family:ui-sans-serif,system-ui,-apple-system,Segoe UI,Roboto,Arial;margin:24px;line-height:1.5}
    h1,h2{margin:0 0 8px}
    .card{border:1px solid #ddd;border-radius:8px;padding:16px;margin:12px 0}
    .grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(220px,1fr));gap:12px}
    .muted{color:#666}
    img{max-width:100%;height:auto;border:1px solid #eee;border-radius:6px}
    """
    # Metrics list
    metric_items = "".join(
        f"<li><b>{k}</b>: {v:.4f}" if isinstance(v, (int, float)) else f"<li><b>{k}</b>: {v}</li>"
        for k, v in metrics.items()
    )

    plot_imgs = "".join(f'<img src="{uri}" />' for uri in key_plots_base64)

    html = f"""
    <html><head><meta charset="utf-8"><title>Auto-EDA Report</title><style>{css}</style></head>
    <body>
      <h1>Auto-EDA + Model Report</h1>
      <p class="muted">Generated by your Streamlit app.</p>

      <div class="card">
        <h2>Dataset</h2>
        <div class="grid">
          <div><b>Shape</b><br/>{dataset_summary.get('shape')}</div>
          <div><b>Target</b><br/>{dataset_summary.get('target')}</div>
          <div><b>Task</b><br/>{dataset_summary.get('task')}</div>
        </div>
      </div>

      <div class="card">
        <h2>EDA Highlights</h2>
        <div class="grid">
          <div><b>Numeric</b><br/>{eda_highlights.get('numeric_count')}</div>
          <div><b>Categorical</b><br/>{eda_highlights.get('categorical_count')}</div>
          <div><b>Datetime</b><br/>{eda_highlights.get('datetime_count')}</div>
          <div><b>Text</b><br/>{eda_highlights.get('text_count')}</div>
        </div>
      </div>

      <div class="card">
        <h2>Best Model</h2>
        <p><b>Name:</b> {best_model_name}</p>
        <ul>{metric_items}</ul>
      </div>

      <div class="card">
        <h2>Key Plots</h2>
        {plot_imgs if plot_imgs else "<p class='muted'>No plot snapshots were attached.</p>"}
      </div>
    </body></html>
    """
    return html
